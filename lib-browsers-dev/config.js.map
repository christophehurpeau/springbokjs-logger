{"version":3,"sources":["../src/config.js"],"names":["configure","addConfig","Config","pattern","RegExp","key","keys","handler","handlers","processor","processors","global","__NIGHTINGALE_GLOBAL_HANDLERS","Error","__NIGHTINGALE_CONFIG","__NIGHTINGALE_LOGGER_MAP_CACHE","Map","__NIGHTINGALE_CONFIG_DEFAULT","clearCache","clear","handleConfig","config","patterns","length","console","log","map","unshift","configIsForKey","includes","test","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER","getConfigForLogger","globalCache","has","get","loggerConfig","filter","some","push","stop","set","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD","getConfigForLoggerRecord","level","minLevel","isHandling"],"mappings":"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","file":"config.js","sourcesContent":["type Config = {|\n  pattern: ?RegExp,\n  key: ?string,\n  keys: ?Array<string>,\n  handler: ?Object,\n  handlers: ?Array<Object>,\n  processor: ?any,\n  processors: ?Array<any>,\n|};\n\nif (!PRODUCTION && global.__NIGHTINGALE_GLOBAL_HANDLERS) {\n  // eslint-disable-next-line no-console\n  throw new Error('nightingale: update all to ^5.0.0');\n}\n\nif (!global.__NIGHTINGALE_CONFIG) {\n  global.__NIGHTINGALE_CONFIG = [];\n  global.__NIGHTINGALE_LOGGER_MAP_CACHE = new Map();\n  global.__NIGHTINGALE_CONFIG_DEFAULT = { handlers: [], processors: [] };\n}\n\nfunction clearCache() {\n  global.__NIGHTINGALE_LOGGER_MAP_CACHE.clear();\n}\n\nfunction handleConfig(config: Config) {\n  if (config.keys) {\n    if (config.pattern) {\n      throw new Error('Cannot have key and pattern for the same config');\n    }\n    if (config.key) {\n      throw new Error('Cannot have key and keys for the same config');\n    }\n  } else if (config.key) {\n    if (config.pattern) {\n      throw new Error('Cannot have key and pattern for the same config');\n    }\n    config.keys = [config.key];\n    delete config.key;\n  }\n\n  if (config.patterns) {\n    throw new Error('config.patterns is no longer supported, use pattern');\n  }\n\n  if (config.handler) {\n    if (config.handlers) {\n      throw new Error('Cannot have handler and handlers for the same config');\n    }\n    config.handlers = [config.handler];\n    delete config.handler;\n  }\n\n  if (config.processor) {\n    if (config.processors) {\n      throw new Error('Cannot have processors and processors for the same config');\n    }\n    config.processors = [config.processor];\n    delete config.processor;\n  }\n\n  return config;\n}\n\nexport function configure(config) {\n  if (global.__NIGHTINGALE_CONFIG.length !== 0) {\n    // eslint-disable-next-line no-console\n    console.log('nightingale: warning: config overridden');\n  }\n\n  clearCache();\n  global.__NIGHTINGALE_CONFIG = config.map(handleConfig);\n}\n\nexport function addConfig(config: Config, unshift = false) {\n  config = handleConfig(config);\n  global.__NIGHTINGALE_CONFIG[unshift ? 'unshift' : 'push'](config);\n  clearCache();\n}\n\nconst configIsForKey = key => config => {\n  if (config.keys) return config.keys.includes(key);\n  if (config.pattern) return config.pattern.test(key);\n  return true;\n};\n\nglobal.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER = function getConfigForLogger(key) {\n  const globalCache = global.__NIGHTINGALE_LOGGER_MAP_CACHE;\n\n  if (globalCache.has(key)) {\n    return globalCache.get(key);\n  }\n\n  const loggerConfig = {\n    handlers: [],\n    processors: [],\n  };\n\n  global.__NIGHTINGALE_CONFIG.filter(configIsForKey(key)).some((config) => {\n    if (config.handlers) loggerConfig.handlers.push(...config.handlers);\n    if (config.processors) loggerConfig.processors.push(...config.processors);\n    return config.stop;\n  });\n\n  globalCache.set(key, loggerConfig);\n  return loggerConfig;\n};\n\nglobal.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD = function getConfigForLoggerRecord(key, level) {\n  const { handlers, processors } = global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n\n  return {\n    handlers: handlers.filter(handler => (\n      level >= handler.minLevel && (!handler.isHandling || handler.isHandling(level, key))\n    )),\n    processors,\n  };\n};\n\n"]}