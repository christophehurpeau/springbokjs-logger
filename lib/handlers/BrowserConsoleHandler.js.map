{"version":3,"sources":["../../src/handlers/BrowserConsoleHandler.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IAGY,uBAAuB;;;;IACvB,aAAa;;;;;;AAEzB,MAAM,WAAW,GAAG,CAAC,AAAC,WAAW,IAAK;AAClC,QAAI,CAAC,WAAW,EAAE;AACd,eAAO,EAAE,CAAC;KACb;;;AAAA,AAGD,WAAO,SAAS,CACZ,WAAW,CAAC,OAAO,CACf,IAAI,MAAM,CAAC,cAAc,GAAG,OAAO,GAAG,sBAAsB,EAAE,GAAG,CAAC,EAClE,IAAI,CACP,CACJ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;CAChB,CAAA,CAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;;IAEC,qBAAqB,GAA3B,MAAM,qBAAqB,2BAAiB;;;;AAIvD,eAAW,CAAC,QAAQ,EAAE;AAClB,YAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;AAC9B,gBAAI,KAAK,GAAG,WAAW,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;AAC3E,gBAAI,CAAC,KAAK,IAAI,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;AAClC,qBAAK,GAAG,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;aAC9D;;AAED,oBAAQ,GAAG,KAAK,GAAG,mBAAS,GAAG,GAAG,mBAAS,IAAI,CAAC;SACnD;;AAED,aAAK,CACD,QAAQ,EACR,mCAAyB,uBAAuB,CAAC,EACjD,aAAa,CAChB,CAAC;KACL;CACJ;kBApBoB,qBAAqB","file":"BrowserConsoleHandler.js","sourcesContent":["import Handler from '../Handler';\nimport LogLevel from '../LogLevel';\nimport LayoutBrowserConsole from '../layouts/LayoutBrowserConsole';\nimport * as formatterBrowserConsole from '../formatters/formatterBrowserConsole';\nimport * as outputConsole from '../outputs/outputBrowserConsole';\n\nconst debugValues = ((querystring) => {\n    if (!querystring) {\n        return [];\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/URLUtils/search#Get_the_value_of_a_single_search_param\n    return decodeURI(\n        querystring.replace(\n            new RegExp('^(?:.*[&\\\\?]' + 'DEBUG' + '(?:\\\\=([^&]*))?)?.*$', 'i'),\n            '$1'\n        )\n    ).split(',');\n})(location.search);\n\nexport default class BrowserConsoleHandler extends Handler {\n    /**\n     * @param {int|string} minLevel if int, see {@link LogLevel} ; if string, based on process.env.DEBUG\n     */\n    constructor(minLevel) {\n        if (typeof minLevel === 'string') {\n            let debug = debugValues[0] === '*' || debugValues.indexOf(minLevel) !== -1;\n            if (!debug && minLevel.includes('.')) {\n                debug = debugValues.indexOf(minLevel.split('.')[0]) !== -1;\n            }\n\n            minLevel = debug ? LogLevel.ALL : LogLevel.WARN;\n        }\n\n        super(\n            minLevel,\n            new LayoutBrowserConsole(formatterBrowserConsole),\n            outputConsole\n        );\n    }\n}\n"]}