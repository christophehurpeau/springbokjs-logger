{"version":3,"sources":["../src/Logger.js"],"names":[],"mappings":"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","file":"Logger.js","sourcesContent":["import util from 'util';\nimport LogLevel from './LogLevel';\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport default class Logger {\n    /**\n     * Create a new Logger\n     *\n     * @param {Handler[]} handlers\n     */\n    constructor(handlers) {\n        this.handlers = handlers;\n\n        Object.getOwnPropertyNames(Logger.prototype).forEach((key) => {\n            if (key === 'constructor') {\n                return;\n            }\n\n            this[key] = Logger.prototype[key].bind(this);\n        });\n    }\n\n    /**\n     * Write a message\n     *\n     * @param {string} message\n     * @param {string} logLevel\n     * @return {Logger}\n     */\n    write(message, logLevel) {\n        this.output.write(message, logLevel);\n        return this;\n    }\n\n    /**\n     * Handle a record\n     *\n     * Use this only if you know what you are doing.\n     *\n     * @param {Object} record\n     */\n    addRecord(record) {\n        for (let i = 0, length = this.handlers.length; i < length; i++) {\n            let handler = this.handlers[i];\n            if (handler.handle(record) === false) {\n                return;\n            }\n        }\n    }\n\n    /**\n     * Log a message\n     *\n     * @param {string} message\n     * @param {Object} context\n     * @param {int} [logLevel]\n     * @param {Object} [options]\n     * @return {Logger}\n     */\n    log(message, context, logLevel = LogLevel.INFO, options = undefined) {\n        let record = {\n            level: logLevel,\n            prefix: this._prefix,\n            datetime: new Date(),\n            message: message,\n            context: context,\n            extra: {},\n        };\n\n        if (options) {\n            record = Object.assign(options, record);\n        }\n\n        this.addRecord(record);\n        return this;\n    }\n\n    /**\n     * Set the logger prefix\n     *\n     * @param {string} prefix\n     * @param {*} [styles]\n     */\n    setPrefix(prefix, styles) {\n        this._prefix = prefix;\n    }\n\n    /**\n     * Log an debug message\n     *\n     * @param {string} message\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n     * @return {Logger}\n     */\n    debug(message, context, contextStyles) {\n        return this.log(message, context, LogLevel.DEBUG, { contextStyles });\n    }\n\n    /**\n     * Log an info message\n     *\n     * @param {string} message\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n     * @return {Logger}\n     */\n    info(message, context, contextStyles) {\n        return this.log(message, context, LogLevel.INFO, { contextStyles });\n    }\n\n    /**\n     * Log an warn message\n     *\n     * @param {string} message\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n     * @return {Logger}\n     */\n    warn(message, context, contextStyles) {\n        return this.log(message, context, LogLevel.WARN, { contextStyles });\n    }\n\n    /**\n     * Log an error message\n     *\n     * @param {string|Error} message\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n     * @return {Logger}\n     */\n    error(message, context, contextStyles) {\n        message = message.stack || message.message || message;\n        return this.log(message, context, LogLevel.ERROR, { contextStyles });\n    }\n\n    /**\n     * Log an alert message\n     *\n     * @param {string} message\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n     * @return {Logger}\n     */\n    alert(message, context, contextStyles) {\n        return this.log(message, context, LogLevel.ALERT, { contextStyles });\n    }\n\n    /**\n     * Log an fatal message\n     *\n     * @param {string} message\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n     * @return {Logger}\n     */\n    fatal(message, context, contextStyles) {\n        return this.log(message, context, LogLevel.FATAL, { contextStyles });\n    }\n\n    /**\n     * Log an inspected value\n     *\n     * @param {*} value\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n     * @return {Logger}\n     */\n    inspectValue(value, context, contextStyles) {\n        // Note: inspect is a special function for node:\n        // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n        value = util.inspect(value, { depth: 6 });\n        return this.log(value, context, LogLevel.DEBUG, { contextStyles, styles: ['gray'] });\n    }\n\n    /**\n     * Log an debugged var\n     *\n     * @param {string} varName\n     * @param {*} varValue\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n     * @return {Logger}\n     */\n    inspectVar(varName, varValue, context, contextStyles) {\n        varValue = util.inspect(varValue, { depth: 6 });\n        return this.log(`${varName} = ${varValue}`, context, LogLevel.DEBUG, { contextStyles, styles: ['cyan'] });\n    }\n\n    /**\n     * Log an sucess message\n     *\n     * @param {string} message\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n     * @return {Logger}\n     */\n    success(message, context, contextStyles) {\n        return this.log(message, context, LogLevel.INFO, {\n            contextStyles,\n            symbol: '✔',\n            styles: ['green', 'bold'],\n        });\n    }\n\n    /**\n     * Stores current time in milliseconds\n     * in the timers map\n     *\n     * @param {string} name timer name\n     */\n    time(name) {\n        if (name) {\n            if (!this._timers) {\n                this._timers = {};\n            }\n\n            return this._timers[name] = Date.now();\n        }\n\n        return Date.now();\n    }\n\n    /**\n    * Finds difference between when this method\n    * was called and when the respective time method\n    * was called, then logs out the difference\n    * and deletes the original record\n    *\n    * @param {number=} time return of previous call to time()\n    * @param {string} name timer name\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n    */\n    timeEnd(time, name, context, contextStyles) {\n        const now = Date.now();\n\n        if (typeof time !== 'number') {\n            contextStyles = context;\n            context = name;\n            name = time;\n\n            if (!this._timers || !this._timers[name]) {\n                return;\n            }\n\n            time = this._timers[name];\n            delete this._timers[name];\n        }\n\n        const diffTime = now - time;\n        const seconds = diffTime > 1000 && Math.floor(diffTime / 1000);\n        const ms = diffTime - seconds * 1000;\n\n        const message = `${name ? `${name}: ` : ''}${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n        this.log(message, context, LogLevel.INFO, { contextStyles });\n    }\n\n    /**\n     * Log an enter in a function\n     *\n     * @example\n     * class A {\n     *   method(arg1) {\n     *     logger.enter(method, { arg1 });\n     *     // Do your stuff\n     *   }\n     * }\n     *\n     * @param {Function} fn\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n     * @return {Logger}\n     */\n    enter(fn, context, contextStyles) {\n        return this.log(`enter ${fn.name}`, context, LogLevel.DEBUG, { contextStyles });\n    }\n\n    /**\n     * Log an exit in a function\n     *\n     * @example\n     * const logger = new ConsoleLogger('myNamespace.A');\n     * class A {\n     *   method(arg1) {\n     *     // Do your stuff\n     *     logger.exit(method, { arg1 });\n     *   }\n     * }\n     *\n     *\n     * @param {Function} fn\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n     * @return {Logger}\n     */\n    exit(fn, context, contextStyles) {\n        return this.log(`exit ${fn.name}`, context, LogLevel.DEBUG, { contextStyles });\n    }\n\n    /**\n     * Wrap around a function to log enter and exit of a function\n     *\n     * @example\n     * const logger = new ConsoleLogger('myNamespace.A');\n     * class A {\n     *   method() {\n     *     logger.wrap(method, () => {\n     *       // Do your stuff\n     *     });\n     *   }\n     * }\n     *\n     * @param {Function} fn\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n     * @param {Function} callback\n     */\n    wrap(fn, context, contextStyles, callback) {\n        if (typeof context === 'function') {\n            callback = context;\n            context = undefined;\n        } else if (typeof contextStyles === 'function') {\n            callback = contextStyles;\n            contextStyles = undefined;\n        }\n\n        this.enter(fn, context, contextStyles);\n        callback();\n        this.exit(fn);\n    }\n}\n"]}