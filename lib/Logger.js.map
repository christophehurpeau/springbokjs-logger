{"version":3,"sources":["../src/Logger.js"],"names":[],"mappings":"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","file":"Logger.js","sourcesContent":["import util from 'util';\nimport LogLevel from './LogLevel';\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport default class Logger {\n    /**\n     * Create a new Logger\n     *\n     * @param {Handler[]} handlers\n     */\n    constructor(handlers) {\n        this.handlers = handlers;\n\n        Object.getOwnPropertyNames(Logger.prototype).forEach((key) => {\n            if (key === 'constructor') {\n                return;\n            }\n\n            this[key] = Logger.prototype[key].bind(this);\n        });\n    }\n\n    /**\n     * Write a message\n     *\n     * @param {String} message\n     * @param {String} logLevel\n     * @return {Logger}\n     */\n    write(message, logLevel) {\n        this.output.write(message, logLevel);\n        return this;\n    }\n\n    /**\n     * Handle a record\n     *\n     * Use this only if you know what you are doing.\n     *\n     * @param {Object} record\n     */\n    addRecord(record) {\n        for (let i = 0, length = this.handlers.length; i < length; i++) {\n            let handler = this.handlers[i];\n            if (handler.handle(record) === false) {\n                return;\n            }\n        }\n    }\n\n    /**\n     * Log a message\n     *\n     * @param {String} message\n     * @param {Object} context\n     * @param {int} [logLevel]\n     * @param {Object} [options]\n     * @return {Logger}\n     */\n    log(message, context, logLevel = LogLevel.INFO, options = undefined) {\n        let record = {\n            level: logLevel,\n            prefix: this._prefix,\n            datetime: new Date(),\n            message: message,\n            context: context,\n            extra: {},\n        };\n\n        if (options) {\n            record = Object.assign(options, record);\n        }\n\n        this.addRecord(record);\n        return this;\n    }\n\n    /**\n     * Set the logger prefix\n     *\n     * @param {String} prefix\n     * @param {*} [styles]\n     */\n    setPrefix(prefix, styles) {\n        this._prefix = prefix;\n    }\n\n    /**\n     * Log an debug message\n     *\n     * @param {String} message\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n     * @return {Logger}\n     */\n    debug(message, context, contextStyles) {\n        return this.log(message, context, LogLevel.DEBUG, { contextStyles });\n    }\n\n    /**\n     * Log an info message\n     *\n     * @param {String} message\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n     * @return {Logger}\n     */\n    info(message, context, contextStyles) {\n        return this.log(message, context, LogLevel.INFO, { contextStyles });\n    }\n\n    /**\n     * Log an warn message\n     *\n     * @param {String} message\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n     * @return {Logger}\n     */\n    warn(message, context, contextStyles) {\n        return this.log(message, context, LogLevel.WARN, { contextStyles });\n    }\n\n    /**\n     * Log an error message\n     *\n     * @param {String|Error} message\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n     * @return {Logger}\n     */\n    error(message, context, contextStyles) {\n        return this.log(message.stack || message.message || message, context, LogLevel.ERROR, { contextStyles });\n    }\n\n    /**\n     * Log an alert message\n     *\n     * @param {String} message\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n     * @return {Logger}\n     */\n    alert(message, context, contextStyles) {\n        return this.log(message, context, LogLevel.ALERT, { contextStyles });\n    }\n\n    /**\n     * Log an fatal message\n     *\n     * @param {String} message\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n     * @return {Logger}\n     */\n    fatal(message, context, contextStyles) {\n        return this.log(message, context, LogLevel.FATAL, { contextStyles });\n    }\n\n    /**\n     * Log an inspected value\n     *\n     * @param {*} value\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n     * @return {Logger}\n     */\n    inspectValue(value, context, contextStyles) {\n        // Note: inspect is a special function for node:\n        // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n        value = util.inspect(value, { depth: 6 });\n        return this.log(value, context, LogLevel.DEBUG, { contextStyles, styles: ['gray'] });\n    }\n\n    /**\n     * Log an debugged var\n     *\n     * @param {String} varName\n     * @param {*} varValue\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n     * @return {Logger}\n     */\n    inspectVar(varName, varValue, context, contextStyles) {\n        varValue = util.inspect(varValue, { depth: 6 });\n        return this.log(varName + ' = ' + varValue, context, LogLevel.DEBUG, { contextStyles, styles: ['cyan'] });\n    }\n\n    /**\n     * Log an sucess message\n     *\n     * @param {String} message\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n     * @return {Logger}\n     */\n    success(message, context, contextStyles) {\n        return this.log(message, context, LogLevel.INFO, {\n            contextStyles,\n            symbol: 'âœ”',\n            styles: ['green', 'bold'],\n        });\n    }\n\n    /**\n     * Stores current time in milliseconds\n     * in the timers map\n     *\n     * @param {string} name timer name\n     */\n    time(name) {\n        if (name) {\n            if (!this._timers) {\n                this._timers = {};\n            }\n\n            return this._timers[name] = Date.now();\n        }\n\n        return Date.now();\n    }\n\n    /**\n    * Finds difference between when this method\n    * was called and when the respective time method\n    * was called, then logs out the difference\n    * and deletes the original record\n    *\n    * @param {Number=} time return of previous call to time()\n    * @param {string} name timer name\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n    */\n    timeEnd(time, name, context, contextStyles) {\n        const now = Date.now();\n\n        if (typeof time !== 'number') {\n            contextStyles = context;\n            context = name;\n            name = time;\n\n            if (!this._timers || !this._timers[name]) {\n                return;\n            }\n\n            time = this._timers[name];\n            delete this._timers[name];\n        }\n\n        const diffTime = now - time;\n        const seconds = diffTime > 1000 && Math.floor(diffTime / 1000);\n        const ms = diffTime - seconds * 1000;\n\n        const message = (name ? name + ': ' : '') + (seconds ? seconds + 's and ' : '') + ms + 'ms';\n        this.log(message, context, LogLevel.INFO, { contextStyles });\n    }\n}\n"]}