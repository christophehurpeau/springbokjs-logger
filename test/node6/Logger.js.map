{"version":3,"sources":["../src/Logger.js"],"names":["TestableStringLogger","constructor","stringHandler","ALL","getHandlersAndProcessors","handlers","processors","string","suite","test","logger","log","substr","info","warn","error","alert","fatal","debug","success"],"mappings":";;AAEA;;AACA;;;;AACA;;;;;;AAEA,MAAMA,oBAAN,oBAA0C;AACxCC,gBAAc;AACZ,UAAM,EAAN;AACA,SAAKC,aAAL,GAAqB,gCAAkB,SAAOC,GAAzB,CAArB;AACD;;AAEDC,6BAA2B;AACzB,WAAO;AACLC,gBAAU,CAAC,KAAKH,aAAN,CADL;AAELI,kBAAY;AAFP,KAAP;AAID;;AAED,MAAIC,MAAJ,GAAa;AACX,WAAO,KAAKL,aAAL,CAAmBK,MAA1B;AACD;AAfuC,C,CAN1C;AACA;;;AAuBAC,MAAM,QAAN,EAAgB,MAAM;AACpBC,OAAK,YAAL,EAAmB,MAAM;AACvB,QAAIC,SAAS,IAAIV,oBAAJ,EAAb;AACAU,WAAOC,GAAP,CAAW,OAAX;AACA,6BAAYD,OAAOH,MAAP,CAAcK,MAAd,CAAqB,CAArB,CAAZ,EAAqC,WAArC;AACD,GAJD;;AAMAH,OAAK,aAAL,EAAoB,MAAM;AACxB,QAAIC,SAAS,IAAIV,oBAAJ,EAAb;AACAU,WAAOG,IAAP,CAAY,QAAZ;AACA,6BAAYH,OAAOH,MAAP,CAAcK,MAAd,CAAqB,CAArB,CAAZ,EAAqC,YAArC;AACD,GAJD;;AAMAH,OAAK,aAAL,EAAoB,MAAM;AACxB,QAAIC,SAAS,IAAIV,oBAAJ,EAAb;AACAU,WAAOI,IAAP,CAAY,QAAZ;AACA,6BAAYJ,OAAOH,MAAP,CAAcK,MAAd,CAAqB,CAArB,CAAZ,EAAqC,YAArC;AACD,GAJD;;AAMAH,OAAK,cAAL,EAAqB,MAAM;AACzB,QAAIC,SAAS,IAAIV,oBAAJ,EAAb;AACAU,WAAOK,KAAP,CAAa,SAAb;AACA,6BAAYL,OAAOH,MAAP,CAAcK,MAAd,CAAqB,CAArB,CAAZ,EAAqC,aAArC;AACD,GAJD;;AAMAH,OAAK,cAAL,EAAqB,MAAM;AACzB,QAAIC,SAAS,IAAIV,oBAAJ,EAAb;AACAU,WAAOM,KAAP,CAAa,SAAb;AACA,6BAAYN,OAAOH,MAAP,CAAcK,MAAd,CAAqB,CAArB,CAAZ,EAAqC,aAArC;AACD,GAJD;;AAMAH,OAAK,cAAL,EAAqB,MAAM;AACzB,QAAIC,SAAS,IAAIV,oBAAJ,EAAb;AACAU,WAAOO,KAAP,CAAa,SAAb;AACA,6BAAYP,OAAOH,MAAP,CAAcK,MAAd,CAAqB,CAArB,CAAZ,EAAqC,aAArC;AACD,GAJD;;AAMAH,OAAK,cAAL,EAAqB,MAAM;AACzB,QAAIC,SAAS,IAAIV,oBAAJ,EAAb;AACAU,WAAOQ,KAAP,CAAa,SAAb;AACA,6BAAYR,OAAOH,MAAP,CAAcK,MAAd,CAAqB,CAArB,CAAZ,EAAqC,aAArC;AACD,GAJD;;AAMAH,OAAK,gBAAL,EAAuB,MAAM;AAC3B,QAAIC,SAAS,IAAIV,oBAAJ,EAAb;AACAU,WAAOS,OAAP,CAAe,WAAf;AACA,6BAAYT,OAAOH,MAAP,CAAcK,MAAd,CAAqB,CAArB,CAAZ,EAAqC,eAArC;AACD,GAJD;AAKD,CAhDD","file":"Logger.js","sourcesContent":["/* global suite, test */\n/* eslint import/no-extraneous-dependencies: \"off\" */\nimport { strictEqual } from 'assert';\nimport StringHandler from 'nightingale-string';\nimport Logger, { levels } from '../../';\n\nclass TestableStringLogger extends Logger {\n  constructor() {\n    super('');\n    this.stringHandler = new StringHandler(levels.ALL);\n  }\n\n  getHandlersAndProcessors() {\n    return {\n      handlers: [this.stringHandler],\n      processors: [],\n    };\n  }\n\n  get string() {\n    return this.stringHandler.string;\n  }\n}\n\nsuite('Logger', () => {\n  test('log method', () => {\n    let logger = new TestableStringLogger();\n    logger.log('log()');\n    strictEqual(logger.string.substr(9), '→ log()\\n');\n  });\n\n  test('info method', () => {\n    let logger = new TestableStringLogger();\n    logger.info('info()');\n    strictEqual(logger.string.substr(9), '→ info()\\n');\n  });\n\n  test('warn method', () => {\n    let logger = new TestableStringLogger();\n    logger.warn('warn()');\n    strictEqual(logger.string.substr(9), '⚠ warn()\\n');\n  });\n\n  test('error method', () => {\n    let logger = new TestableStringLogger();\n    logger.error('error()');\n    strictEqual(logger.string.substr(9), '✖ error()\\n');\n  });\n\n  test('alert method', () => {\n    let logger = new TestableStringLogger();\n    logger.alert('alert()');\n    strictEqual(logger.string.substr(9), '‼ alert()\\n');\n  });\n\n  test('fatal method', () => {\n    let logger = new TestableStringLogger();\n    logger.fatal('fatal()');\n    strictEqual(logger.string.substr(9), '‼ fatal()\\n');\n  });\n\n  test('debug method', () => {\n    let logger = new TestableStringLogger();\n    logger.debug('debug()');\n    strictEqual(logger.string.substr(9), '• debug()\\n');\n  });\n\n  test('success method', () => {\n    let logger = new TestableStringLogger();\n    logger.success('success()');\n    strictEqual(logger.string.substr(9), '✔ success()\\n');\n  });\n});\n"]}