{"version":3,"sources":["../src/Logger.js"],"names":[],"mappings":";;AAEA;;AACA;;;;AACA;;;;;;AAEA,MAAM,oBAAN,oBAA0C;AACtC,kBAAc;AACV,cAAM,EAAN;AACA,aAAK,aAAL,GAAqB,gCAAkB,SAAO,GAAzB,CAArB;AACH;;AAED,gBAAY;AACR,eAAO;AACH,sBAAU,CAAC,KAAK,aAAN,CADP;AAEH,wBAAY;AAFT,SAAP;AAIH;;AAED,QAAI,MAAJ,GAAa;AACT,eAAO,KAAK,aAAL,CAAmB,MAA1B;AACH;AAfqC,C,CAN1C;AACA;;;AAuBA,KAAK,oBAAL,EAA2B,MAAM;AAC7B,QAAI,SAAS,IAAI,oBAAJ,EAAb;AACA,WAAO,GAAP,CAAW,OAAX;AACA,6BAAY,OAAO,MAAP,CAAc,MAAd,CAAqB,CAArB,CAAZ,EAAqC,WAArC;AACH,CAJD;;AAMA,KAAK,qBAAL,EAA4B,MAAM;AAC9B,QAAI,SAAS,IAAI,oBAAJ,EAAb;AACA,WAAO,IAAP,CAAY,QAAZ;AACA,6BAAY,OAAO,MAAP,CAAc,MAAd,CAAqB,CAArB,CAAZ,EAAqC,YAArC;AACH,CAJD;;AAMA,KAAK,qBAAL,EAA4B,MAAM;AAC9B,QAAI,SAAS,IAAI,oBAAJ,EAAb;AACA,WAAO,IAAP,CAAY,QAAZ;AACA,6BAAY,OAAO,MAAP,CAAc,MAAd,CAAqB,CAArB,CAAZ,EAAqC,YAArC;AACH,CAJD;;AAMA,KAAK,sBAAL,EAA6B,MAAM;AAC/B,QAAI,SAAS,IAAI,oBAAJ,EAAb;AACA,WAAO,KAAP,CAAa,SAAb;AACA,6BAAY,OAAO,MAAP,CAAc,MAAd,CAAqB,CAArB,CAAZ,EAAqC,aAArC;AACH,CAJD;;AAMA,KAAK,sBAAL,EAA6B,MAAM;AAC/B,QAAI,SAAS,IAAI,oBAAJ,EAAb;AACA,WAAO,KAAP,CAAa,SAAb;AACA,6BAAY,OAAO,MAAP,CAAc,MAAd,CAAqB,CAArB,CAAZ,EAAqC,aAArC;AACH,CAJD;;AAMA,KAAK,sBAAL,EAA6B,MAAM;AAC/B,QAAI,SAAS,IAAI,oBAAJ,EAAb;AACA,WAAO,KAAP,CAAa,SAAb;AACA,6BAAY,OAAO,MAAP,CAAc,MAAd,CAAqB,CAArB,CAAZ,EAAqC,aAArC;AACH,CAJD;;AAMA,KAAK,sBAAL,EAA6B,MAAM;AAC/B,QAAI,SAAS,IAAI,oBAAJ,EAAb;AACA,WAAO,KAAP,CAAa,SAAb;AACA,6BAAY,OAAO,MAAP,CAAc,MAAd,CAAqB,CAArB,CAAZ,EAAqC,aAArC;AACH,CAJD;;AAMA,KAAK,wBAAL,EAA+B,MAAM;AACjC,QAAI,SAAS,IAAI,oBAAJ,EAAb;AACA,WAAO,OAAP,CAAe,WAAf;AACA,6BAAY,OAAO,MAAP,CAAc,MAAd,CAAqB,CAArB,CAAZ,EAAqC,eAArC;AACH,CAJD","file":"Logger.js","sourcesContent":["/* global test */\n/* eslint import/no-extraneous-dependencies: \"off\" */\nimport { strictEqual } from 'assert';\nimport StringHandler from 'nightingale-string';\nimport Logger, { levels } from '../../';\n\nclass TestableStringLogger extends Logger {\n    constructor() {\n        super('');\n        this.stringHandler = new StringHandler(levels.ALL);\n    }\n\n    getConfig() {\n        return {\n            handlers: [this.stringHandler],\n            processors: [],\n        };\n    }\n\n    get string() {\n        return this.stringHandler.string;\n    }\n}\n\ntest('Logger: log method', () => {\n    let logger = new TestableStringLogger();\n    logger.log('log()');\n    strictEqual(logger.string.substr(9), '→ log()\\n');\n});\n\ntest('Logger: info method', () => {\n    let logger = new TestableStringLogger();\n    logger.info('info()');\n    strictEqual(logger.string.substr(9), '→ info()\\n');\n});\n\ntest('Logger: warn method', () => {\n    let logger = new TestableStringLogger();\n    logger.warn('warn()');\n    strictEqual(logger.string.substr(9), '⚠ warn()\\n');\n});\n\ntest('Logger: error method', () => {\n    let logger = new TestableStringLogger();\n    logger.error('error()');\n    strictEqual(logger.string.substr(9), '✖ error()\\n');\n});\n\ntest('Logger: alert method', () => {\n    let logger = new TestableStringLogger();\n    logger.alert('alert()');\n    strictEqual(logger.string.substr(9), '‼ alert()\\n');\n});\n\ntest('Logger: fatal method', () => {\n    let logger = new TestableStringLogger();\n    logger.fatal('fatal()');\n    strictEqual(logger.string.substr(9), '‼ fatal()\\n');\n});\n\ntest('Logger: debug method', () => {\n    let logger = new TestableStringLogger();\n    logger.debug('debug()');\n    strictEqual(logger.string.substr(9), '• debug()\\n');\n});\n\ntest('Logger: success method', () => {\n    let logger = new TestableStringLogger();\n    logger.success('success()');\n    strictEqual(logger.string.substr(9), '✔ success()\\n');\n});\n"]}