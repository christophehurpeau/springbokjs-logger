{"version":3,"sources":["../src/Logger.js"],"names":["TestableStringLogger","constructor","stringHandler","ALL","getConfig","handlers","processors","string","test","logger","log","substr","info","warn","error","alert","fatal","debug","success"],"mappings":";;AAEA;;AACA;;;;AACA;;;;;;AAEA,MAAMA,oBAAN,oBAA0C;AACxCC,gBAAc;AACZ,UAAM,EAAN;AACA,SAAKC,aAAL,GAAqB,gCAAkB,SAAOC,GAAzB,CAArB;AACD;;AAEDC,cAAY;AACV,WAAO;AACLC,gBAAU,CAAC,KAAKH,aAAN,CADL;AAELI,kBAAY;AAFP,KAAP;AAID;;AAED,MAAIC,MAAJ,GAAa;AACX,WAAO,KAAKL,aAAL,CAAmBK,MAA1B;AACD;AAfuC,C,CAN1C;AACA;;;AAuBAC,KAAK,oBAAL,EAA2B,MAAM;AAC/B,MAAIC,SAAS,IAAIT,oBAAJ,EAAb;AACAS,SAAOC,GAAP,CAAW,OAAX;AACA,2BAAYD,OAAOF,MAAP,CAAcI,MAAd,CAAqB,CAArB,CAAZ,EAAqC,WAArC;AACD,CAJD;;AAMAH,KAAK,qBAAL,EAA4B,MAAM;AAChC,MAAIC,SAAS,IAAIT,oBAAJ,EAAb;AACAS,SAAOG,IAAP,CAAY,QAAZ;AACA,2BAAYH,OAAOF,MAAP,CAAcI,MAAd,CAAqB,CAArB,CAAZ,EAAqC,YAArC;AACD,CAJD;;AAMAH,KAAK,qBAAL,EAA4B,MAAM;AAChC,MAAIC,SAAS,IAAIT,oBAAJ,EAAb;AACAS,SAAOI,IAAP,CAAY,QAAZ;AACA,2BAAYJ,OAAOF,MAAP,CAAcI,MAAd,CAAqB,CAArB,CAAZ,EAAqC,YAArC;AACD,CAJD;;AAMAH,KAAK,sBAAL,EAA6B,MAAM;AACjC,MAAIC,SAAS,IAAIT,oBAAJ,EAAb;AACAS,SAAOK,KAAP,CAAa,SAAb;AACA,2BAAYL,OAAOF,MAAP,CAAcI,MAAd,CAAqB,CAArB,CAAZ,EAAqC,aAArC;AACD,CAJD;;AAMAH,KAAK,sBAAL,EAA6B,MAAM;AACjC,MAAIC,SAAS,IAAIT,oBAAJ,EAAb;AACAS,SAAOM,KAAP,CAAa,SAAb;AACA,2BAAYN,OAAOF,MAAP,CAAcI,MAAd,CAAqB,CAArB,CAAZ,EAAqC,aAArC;AACD,CAJD;;AAMAH,KAAK,sBAAL,EAA6B,MAAM;AACjC,MAAIC,SAAS,IAAIT,oBAAJ,EAAb;AACAS,SAAOO,KAAP,CAAa,SAAb;AACA,2BAAYP,OAAOF,MAAP,CAAcI,MAAd,CAAqB,CAArB,CAAZ,EAAqC,aAArC;AACD,CAJD;;AAMAH,KAAK,sBAAL,EAA6B,MAAM;AACjC,MAAIC,SAAS,IAAIT,oBAAJ,EAAb;AACAS,SAAOQ,KAAP,CAAa,SAAb;AACA,2BAAYR,OAAOF,MAAP,CAAcI,MAAd,CAAqB,CAArB,CAAZ,EAAqC,aAArC;AACD,CAJD;;AAMAH,KAAK,wBAAL,EAA+B,MAAM;AACnC,MAAIC,SAAS,IAAIT,oBAAJ,EAAb;AACAS,SAAOS,OAAP,CAAe,WAAf;AACA,2BAAYT,OAAOF,MAAP,CAAcI,MAAd,CAAqB,CAArB,CAAZ,EAAqC,eAArC;AACD,CAJD","file":"Logger.js","sourcesContent":["/* global test */\n/* eslint import/no-extraneous-dependencies: \"off\" */\nimport { strictEqual } from 'assert';\nimport StringHandler from 'nightingale-string';\nimport Logger, { levels } from '../../';\n\nclass TestableStringLogger extends Logger {\n  constructor() {\n    super('');\n    this.stringHandler = new StringHandler(levels.ALL);\n  }\n\n  getConfig() {\n    return {\n      handlers: [this.stringHandler],\n      processors: [],\n    };\n  }\n\n  get string() {\n    return this.stringHandler.string;\n  }\n}\n\ntest('Logger: log method', () => {\n  let logger = new TestableStringLogger();\n  logger.log('log()');\n  strictEqual(logger.string.substr(9), '→ log()\\n');\n});\n\ntest('Logger: info method', () => {\n  let logger = new TestableStringLogger();\n  logger.info('info()');\n  strictEqual(logger.string.substr(9), '→ info()\\n');\n});\n\ntest('Logger: warn method', () => {\n  let logger = new TestableStringLogger();\n  logger.warn('warn()');\n  strictEqual(logger.string.substr(9), '⚠ warn()\\n');\n});\n\ntest('Logger: error method', () => {\n  let logger = new TestableStringLogger();\n  logger.error('error()');\n  strictEqual(logger.string.substr(9), '✖ error()\\n');\n});\n\ntest('Logger: alert method', () => {\n  let logger = new TestableStringLogger();\n  logger.alert('alert()');\n  strictEqual(logger.string.substr(9), '‼ alert()\\n');\n});\n\ntest('Logger: fatal method', () => {\n  let logger = new TestableStringLogger();\n  logger.fatal('fatal()');\n  strictEqual(logger.string.substr(9), '‼ fatal()\\n');\n});\n\ntest('Logger: debug method', () => {\n  let logger = new TestableStringLogger();\n  logger.debug('debug()');\n  strictEqual(logger.string.substr(9), '• debug()\\n');\n});\n\ntest('Logger: success method', () => {\n  let logger = new TestableStringLogger();\n  logger.success('success()');\n  strictEqual(logger.string.substr(9), '✔ success()\\n');\n});\n"]}