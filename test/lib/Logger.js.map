{"version":3,"sources":["../src/Logger.js"],"names":[],"mappings":"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","file":"Logger.js","sourcesContent":["/* global test */\n\nimport Logger from '../../lib/Logger';\nimport StringHandler from '../../lib/handlers/StringHandler';\nimport assert from 'proclaim';\n\ntest('Logger: log method', () => {\n    let stringHandler = new StringHandler(0);\n    let logger = new Logger([stringHandler]);\n    logger.log('log()');\n    assert.strictEqual(stringHandler.string.substr(9), '→ log()\\n');\n});\n\ntest('Logger: info method', () => {\n    let stringHandler = new StringHandler(0);\n    let logger = new Logger([stringHandler]);\n    logger.info('info()');\n    assert.strictEqual(stringHandler.string.substr(9), '→ info()\\n');\n});\n\ntest('Logger: warn method', () => {\n    let stringHandler = new StringHandler(0);\n    let logger = new Logger([stringHandler]);\n    logger.warn('warn()');\n    assert.strictEqual(stringHandler.string.substr(9), '⚠ warn()\\n');\n});\n\ntest('Logger: error method', () => {\n    let stringHandler = new StringHandler(0);\n    let logger = new Logger([stringHandler]);\n    logger.error('error()');\n    assert.strictEqual(stringHandler.string.substr(9), '✖ error()\\n');\n});\n\ntest('Logger: alert method', () => {\n    let stringHandler = new StringHandler(0);\n    let logger = new Logger([stringHandler]);\n    logger.alert('alert()');\n    assert.strictEqual(stringHandler.string.substr(9), '‼ alert()\\n');\n});\n\ntest('Logger: fatal method', () => {\n    let stringHandler = new StringHandler(0);\n    let logger = new Logger([stringHandler]);\n    logger.fatal('fatal()');\n    assert.strictEqual(stringHandler.string.substr(9), '‼ fatal()\\n');\n});\n\ntest('Logger: debug method', () => {\n    let stringHandler = new StringHandler(0);\n    let logger = new Logger([stringHandler]);\n    logger.debug('debug()');\n    assert.strictEqual(stringHandler.string.substr(9), '• debug()\\n');\n});\n\ntest('Logger: success method', () => {\n    let stringHandler = new StringHandler(0);\n    let logger = new Logger([stringHandler]);\n    logger.success('success()');\n    assert.strictEqual(stringHandler.string.substr(9), '✔ success()\\n');\n});\n"]}