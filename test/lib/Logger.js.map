{"version":3,"sources":["../src/Logger.js"],"names":[],"mappings":";;AAEA;;;;AACA;;;;AACA;;;;;;;;AAEA,KAAK,oBAAL,EAA2B,MAAM;AAC7B,QAAI,gBAAgB,gCAAkB,YAAO,GAAzB,CAApB;AACA,wBAAU,CAAC,EAAE,UAAU,CAAC,aAAD,CAAZ,EAAD,CAAV;AACA,QAAI,SAAS,mBAAb;AACA,WAAO,GAAP,CAAW,OAAX;AACA,6BAAY,cAAc,MAAd,CAAqB,MAArB,CAA4B,CAA5B,CAAZ,EAA4C,WAA5C;AACH,CAND,E;;AAQA,KAAK,qBAAL,EAA4B,MAAM;AAC9B,QAAI,gBAAgB,gCAAkB,YAAO,GAAzB,CAApB;AACA,wBAAU,CAAC,EAAE,UAAU,CAAC,aAAD,CAAZ,EAAD,CAAV;AACA,QAAI,SAAS,mBAAb;AACA,WAAO,IAAP,CAAY,QAAZ;AACA,6BAAY,cAAc,MAAd,CAAqB,MAArB,CAA4B,CAA5B,CAAZ,EAA4C,YAA5C;AACH,CAND;;AAQA,KAAK,qBAAL,EAA4B,MAAM;AAC9B,QAAI,gBAAgB,gCAAkB,YAAO,GAAzB,CAApB;AACA,wBAAU,CAAC,EAAE,UAAU,CAAC,aAAD,CAAZ,EAAD,CAAV;AACA,QAAI,SAAS,mBAAb;AACA,WAAO,IAAP,CAAY,QAAZ;AACA,6BAAY,cAAc,MAAd,CAAqB,MAArB,CAA4B,CAA5B,CAAZ,EAA4C,YAA5C;AACH,CAND;;AAQA,KAAK,sBAAL,EAA6B,MAAM;AAC/B,QAAI,gBAAgB,gCAAkB,YAAO,GAAzB,CAApB;AACA,wBAAU,CAAC,EAAE,UAAU,CAAC,aAAD,CAAZ,EAAD,CAAV;AACA,QAAI,SAAS,mBAAb;AACA,WAAO,KAAP,CAAa,SAAb;AACA,6BAAY,cAAc,MAAd,CAAqB,MAArB,CAA4B,CAA5B,CAAZ,EAA4C,aAA5C;AACH,CAND;;AAQA,KAAK,sBAAL,EAA6B,MAAM;AAC/B,QAAI,gBAAgB,gCAAkB,YAAO,GAAzB,CAApB;AACA,wBAAU,CAAC,EAAE,UAAU,CAAC,aAAD,CAAZ,EAAD,CAAV;AACA,QAAI,SAAS,mBAAb;AACA,WAAO,KAAP,CAAa,SAAb;AACA,6BAAY,cAAc,MAAd,CAAqB,MAArB,CAA4B,CAA5B,CAAZ,EAA4C,aAA5C;AACH,CAND;;AAQA,KAAK,sBAAL,EAA6B,MAAM;AAC/B,QAAI,gBAAgB,gCAAkB,YAAO,GAAzB,CAApB;AACA,wBAAU,CAAC,EAAE,UAAU,CAAC,aAAD,CAAZ,EAAD,CAAV;AACA,QAAI,SAAS,mBAAb;AACA,WAAO,KAAP,CAAa,SAAb;AACA,6BAAY,cAAc,MAAd,CAAqB,MAArB,CAA4B,CAA5B,CAAZ,EAA4C,aAA5C;AACH,CAND;;AAQA,KAAK,sBAAL,EAA6B,MAAM;AAC/B,QAAI,gBAAgB,gCAAkB,YAAO,GAAzB,CAApB;AACA,wBAAU,CAAC,EAAE,UAAU,CAAC,aAAD,CAAZ,EAAD,CAAV;AACA,QAAI,SAAS,mBAAb;AACA,WAAO,KAAP,CAAa,SAAb;AACA,6BAAY,cAAc,MAAd,CAAqB,MAArB,CAA4B,CAA5B,CAAZ,EAA4C,aAA5C;AACH,CAND;;AAQA,KAAK,wBAAL,EAA+B,MAAM;AACjC,QAAI,gBAAgB,gCAAkB,YAAO,GAAzB,CAApB;AACA,wBAAU,CAAC,EAAE,UAAU,CAAC,aAAD,CAAZ,EAAD,CAAV;AACA,QAAI,SAAS,mBAAb;AACA,WAAO,OAAP,CAAe,WAAf;AACA,6BAAY,cAAc,MAAd,CAAqB,MAArB,CAA4B,CAA5B,CAAZ,EAA4C,eAA5C;AACH,CAND","file":"Logger.js","sourcesContent":["/* global test */\n\nimport Logger, { configure, levels } from '../../lib';\nimport StringHandler from 'nightingale-string';\nimport { strictEqual } from 'assert';\n\ntest('Logger: log method', () => {\n    let stringHandler = new StringHandler(levels.ALL);\n    configure([{ handlers: [stringHandler] }]);\n    let logger = new Logger();\n    logger.log('log()');\n    strictEqual(stringHandler.string.substr(9), '→ log()\\n');\n});\n\ntest('Logger: info method', () => {\n    let stringHandler = new StringHandler(levels.ALL);\n    configure([{ handlers: [stringHandler] }]);\n    let logger = new Logger();\n    logger.info('info()');\n    strictEqual(stringHandler.string.substr(9), '→ info()\\n');\n});\n\ntest('Logger: warn method', () => {\n    let stringHandler = new StringHandler(levels.ALL);\n    configure([{ handlers: [stringHandler] }]);\n    let logger = new Logger();\n    logger.warn('warn()');\n    strictEqual(stringHandler.string.substr(9), '⚠ warn()\\n');\n});\n\ntest('Logger: error method', () => {\n    let stringHandler = new StringHandler(levels.ALL);\n    configure([{ handlers: [stringHandler] }]);\n    let logger = new Logger();\n    logger.error('error()');\n    strictEqual(stringHandler.string.substr(9), '✖ error()\\n');\n});\n\ntest('Logger: alert method', () => {\n    let stringHandler = new StringHandler(levels.ALL);\n    configure([{ handlers: [stringHandler] }]);\n    let logger = new Logger();\n    logger.alert('alert()');\n    strictEqual(stringHandler.string.substr(9), '‼ alert()\\n');\n});\n\ntest('Logger: fatal method', () => {\n    let stringHandler = new StringHandler(levels.ALL);\n    configure([{ handlers: [stringHandler] }]);\n    let logger = new Logger();\n    logger.fatal('fatal()');\n    strictEqual(stringHandler.string.substr(9), '‼ fatal()\\n');\n});\n\ntest('Logger: debug method', () => {\n    let stringHandler = new StringHandler(levels.ALL);\n    configure([{ handlers: [stringHandler] }]);\n    let logger = new Logger();\n    logger.debug('debug()');\n    strictEqual(stringHandler.string.substr(9), '• debug()\\n');\n});\n\ntest('Logger: success method', () => {\n    let stringHandler = new StringHandler(levels.ALL);\n    configure([{ handlers: [stringHandler] }]);\n    let logger = new Logger();\n    logger.success('success()');\n    strictEqual(stringHandler.string.substr(9), '✔ success()\\n');\n});\n"]}