{"version":3,"sources":["../src/config.js"],"names":["global","__NIGHTINGALE_GLOBAL_HANDLERS","console","log","process","exit","__NIGHTINGALE_CONFIG","__NIGHTINGALE_LOGGER_MAP_CACHE","Map","__NIGHTINGALE_CONFIG_DEFAULT","handlers","processors","clearCache","clear","handleConfig","config","keys","pattern","Error","key","patterns","handler","processor","configure","length","map","addConfig","unshift","configIsForKey","includes","test","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER","getConfigForLogger","globalCache","has","get","loggerConfig","filter","some","push","stop","set","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD","getConfigForLoggerRecord","level","minLevel","isHandling"],"mappings":"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","file":"config.js","sourcesContent":["type Config = {\n  pattern: ?RegExp,\n  key: ?string,\n  keys: ?Array<string>,\n  handler: ?Object,\n  handlers: ?Array<Object>,\n  processor: ?any,\n  processors: ?Array<any>,\n};\n\nif (global.__NIGHTINGALE_GLOBAL_HANDLERS) {\n  // eslint-disable-next-line no-console\n  console.log('nightingale: update all to ^5.0.0');\n  process.exit(1);\n}\n\nif (!global.__NIGHTINGALE_CONFIG) {\n  global.__NIGHTINGALE_CONFIG = [];\n  global.__NIGHTINGALE_LOGGER_MAP_CACHE = new Map();\n  global.__NIGHTINGALE_CONFIG_DEFAULT = { handlers: [], processors: [] };\n}\n\nfunction clearCache() {\n  global.__NIGHTINGALE_LOGGER_MAP_CACHE.clear();\n}\n\nfunction handleConfig(config: Config) {\n  if (config.keys) {\n    if (config.pattern) {\n      throw new Error('Cannot have key and pattern for the same config');\n    }\n    if (config.key) {\n      throw new Error('Cannot have key and keys for the same config');\n    }\n  } else if (config.key) {\n    if (config.pattern) {\n      throw new Error('Cannot have key and pattern for the same config');\n    }\n    config.keys = [config.key];\n    delete config.key;\n  }\n\n  if (config.patterns) {\n    throw new Error('config.patterns is no longer supported, use pattern');\n  }\n\n  if (config.handler) {\n    if (config.handlers) {\n      throw new Error('Cannot have handler and handlers for the same config');\n    }\n    config.handlers = [config.handler];\n    delete config.handler;\n  }\n\n  if (config.processor) {\n    if (config.processors) {\n      throw new Error('Cannot have processors and processors for the same config');\n    }\n    config.processors = [config.processor];\n    delete config.processor;\n  }\n\n  return config;\n}\n\nexport function configure(config) {\n  if (global.__NIGHTINGALE_CONFIG.length !== 0) {\n    // eslint-disable-next-line no-console\n    console.log('nightingale: warning: config overridden');\n  }\n\n  clearCache();\n  global.__NIGHTINGALE_CONFIG = config.map(handleConfig);\n}\n\nexport function addConfig(config: Config, unshift = false) {\n  config = handleConfig(config);\n  global.__NIGHTINGALE_CONFIG[unshift ? 'unshift' : 'push'](config);\n  clearCache();\n}\n\nconst configIsForKey = key => config => {\n  if (config.keys) return config.keys.includes(key);\n  if (config.pattern) return config.pattern.test(key);\n  return true;\n};\n\nglobal.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER = function getConfigForLogger(key) {\n  const globalCache = global.__NIGHTINGALE_LOGGER_MAP_CACHE;\n\n  if (globalCache.has(key)) {\n    return globalCache.get(key);\n  }\n\n  const loggerConfig = {\n    handlers: [],\n    processors: [],\n  };\n\n  global.__NIGHTINGALE_CONFIG.filter(configIsForKey(key)).some((config) => {\n    if (config.handlers) loggerConfig.handlers.push(...config.handlers);\n    if (config.processors) loggerConfig.processors.push(...config.processors);\n    return config.stop;\n  });\n\n  globalCache.set(key, loggerConfig);\n  return loggerConfig;\n};\n\nglobal.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD = function getConfigForLoggerRecord(key, level) {\n  const { handlers, processors } = global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n\n  return {\n    handlers: handlers.filter(handler => (\n      level >= handler.minLevel && (!handler.isHandling || handler.isHandling(level, key))\n    )),\n    processors,\n  };\n};\n\n"]}