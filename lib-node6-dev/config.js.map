{"version":3,"sources":["../src/config.js"],"names":["configure","addConfig","addGlobalProcessor","addGlobalHandler","Config","pattern","patterns","handler","handlers","global","__NIGHTINGALE_CONFIG","__NIGHTINGALE_GLOBAL_PROCESSORS","__NIGHTINGALE_GLOBAL_HANDLERS","__NIGHTINGALE_LOGGER_MAP_CACHE","Map","__NIGHTINGALE_CONFIG_DEFAULT","processors","clearCache","clear","handleConfig","config","key","Error","minimatchPatterns","map","length","console","log","reverse","forEach","push","unshift","processor","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER","globalProcessors","globalHandlers","globalCache","has","get","value","find","c","some","p","match","loggerConfig","concat","set"],"mappings":"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","file":"config.js","sourcesContent":["import { Minimatch } from 'minimatch';\n\ntype Config = {\n  pattern: ?string,\n  patterns: ?Array<string>,\n  handler: ?Object,\n  handlers: ?Array<Object>,\n}\n\nif (!global.__NIGHTINGALE_CONFIG) {\n  global.__NIGHTINGALE_CONFIG = [];\n  global.__NIGHTINGALE_GLOBAL_PROCESSORS = [];\n  global.__NIGHTINGALE_GLOBAL_HANDLERS = [];\n  global.__NIGHTINGALE_LOGGER_MAP_CACHE = new Map();\n  global.__NIGHTINGALE_CONFIG_DEFAULT = {\n    handlers: [],\n    processors: [],\n  };\n}\n\nfunction clearCache() {\n  global.__NIGHTINGALE_LOGGER_MAP_CACHE.clear();\n}\n\nfunction handleConfig(config: Config) {\n  if (config.key) {\n    if (config.patterns) {\n      throw new Error('Cannot have key and patterns for the same config');\n    }\n    config.patterns = [config.key];\n    delete config.key;\n  }\n\n  if (config.pattern) {\n    if (config.patterns) {\n      throw new Error('Cannot have pattern and patterns for the same config');\n    }\n    config.patterns = [config.pattern];\n    delete config.pattern;\n  }\n\n  if (config.handler) {\n    if (config.handlers) {\n      throw new Error('Cannot have handler and handlers for the same config');\n    }\n    config.handlers = [config.handler];\n    delete config.handler;\n  }\n\n  if (config.patterns) {\n    config.minimatchPatterns = config.patterns.map(pattern => new Minimatch(pattern));\n  }\n\n  return config;\n}\n\nexport function configure(config) {\n  if (global.__NIGHTINGALE_CONFIG.length !== 0) {\n        // eslint-disable-next-line no-console\n    console.log('nightingale: warning: config overridden');\n  }\n\n  clearCache();\n  global.__NIGHTINGALE_CONFIG = [];\n  global.__NIGHTINGALE_CONFIG_DEFAULT = null;\n\n  config.reverse().forEach(config => {\n    config = handleConfig(config);\n\n    if (config.patterns) {\n      global.__NIGHTINGALE_CONFIG.push(config);\n    } else {\n      if (global.__NIGHTINGALE_CONFIG_DEFAULT) {\n        throw new Error('Config cannot contains more than 1 default declaration');\n      }\n\n      global.__NIGHTINGALE_CONFIG_DEFAULT = config;\n    }\n  });\n\n  if (!global.__NIGHTINGALE_CONFIG_DEFAULT) {\n    global.__NIGHTINGALE_CONFIG_DEFAULT = {\n      handlers: [],\n      processors: [],\n    };\n  }\n}\n\nexport function addConfig(config: Config, unshift = true) {\n  config = handleConfig(config);\n\n  if (!config.patterns) {\n    throw new Error('Config must have `pattern` or `patterns`');\n  }\n\n  clearCache();\n  global.__NIGHTINGALE_CONFIG[unshift ? 'unshift' : 'push'](config);\n}\n\nexport function addGlobalProcessor(processor) {\n  clearCache();\n  global.__NIGHTINGALE_GLOBAL_PROCESSORS.push(processor);\n}\n\nexport function addGlobalHandler(handler) {\n  clearCache();\n  global.__NIGHTINGALE_GLOBAL_HANDLERS.push(handler);\n}\n\nglobal.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER = function (key) {\n  const globalProcessors = global.__NIGHTINGALE_GLOBAL_PROCESSORS;\n  const globalHandlers = global.__NIGHTINGALE_GLOBAL_HANDLERS;\n  const globalCache = global.__NIGHTINGALE_LOGGER_MAP_CACHE;\n\n  if (globalCache.has(key)) {\n    return globalCache.get(key);\n  }\n\n  let value = global.__NIGHTINGALE_CONFIG.find(c => c.minimatchPatterns.some(p => p.match(key)));\n  if (!value) {\n    value = global.__NIGHTINGALE_CONFIG_DEFAULT;\n  }\n\n  let loggerConfig = {\n    patterns: value.patterns,\n    handlers: value.handlers ? globalHandlers.concat(value.handlers) : globalHandlers,\n    processors: value.processors ? globalProcessors.concat(value.processors) : globalProcessors,\n  };\n\n  globalCache.set(key, loggerConfig);\n  return loggerConfig;\n};\n"]}