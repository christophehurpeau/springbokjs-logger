{"version":3,"sources":["../../src/NodeLogger.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;IAGqB,UAAU;cAAV,UAAU;;aAAV,UAAU;8BAAV,UAAU;;sEAAV,UAAU;;;iBAAV,UAAU;;;;;;;;;;;8BASrB,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE;AACnC,gBAAI,QAAO,OAAO,yCAAP,OAAO,OAAK,QAAQ,EAAE;AAC7B,uBAAO,GAAG,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC;aACxC,MAAM;AACH,oBAAI,WAAW,GAAG,cAfrB,KAAK,EAe2B,OAAO,CAAC,CAAC;AACtC,uBAAO,GAAG,WAAW,CAAC,QAAQ,EAAE,CAAC;aACpC;AACD,8CAhBa,UAAU,uCAgBJ,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE;SACvD;;;WAjBgB,UAAU;;;kBAAV,UAAU","file":"NodeLogger.js","sourcesContent":["import Logger from './Logger';\nimport { parse as parseError } from 'alouette';\n\nexport default class NodeLogger extends Logger {\n    /**\n     * Log an error message\n     *\n     * @param {String|Error} message\n     * @param {Object} [context]\n     * @param {Object} [contextStyles]\n     * @return {Logger}\n     */\n    error(message, context, contextStyles) {\n        if (typeof message !== 'object') {\n            message = message.message || message;\n        } else {\n            let parsedError = parseError(message);\n            message = parsedError.toString();\n        }\n        return super.error(message, context, contextStyles);\n    }\n}\n"]}