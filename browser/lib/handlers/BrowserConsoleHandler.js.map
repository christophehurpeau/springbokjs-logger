{"version":3,"sources":["../../../src/handlers/BrowserConsoleHandler.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IAGY;;;;IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEZ,IAAM,cAAc,UAAE,WAAD,EAAiB;AAClC,QAAI,wBAAwB,OAAO,YAAP,IAAuB,aAAa,KAAb,IAAsB,aAAa,KAAb,IAAsB,EAAnE,CADM;AAElC,QAAI,OAAO,qBAAP,KAAiC,QAAjC,EAA2C;AAC3C,gCAAwB,sBAAsB,KAAtB,CAA4B,GAA5B,CAAxB,CAD2C;KAA/C;;AAIA,QAAI,CAAC,WAAD,EAAc;AACd,eAAO,qBAAP,CADc;KAAlB;;;AANkC,WAW3B,sBAAsB,MAAtB,CAA6B,UAChC,YAAY,OAAZ,CACI,IAAI,MAAJ,CAAW,iBAAiB,OAAjB,GAA2B,sBAA3B,EAAmD,GAA9D,CADJ,EAEI,IAFJ,CADgC,EAKlC,KALkC,CAK5B,GAL4B,CAA7B,CAAP,CAXkC;CAAjB,CAiBlB,SAAS,MAAT,CAjBG;;IAmBe;;;;;;;;;;;;AAKjB,aALiB,qBAKjB,CAAY,QAAZ,EAAsB,IAAtB,EAA4B;8BALX,uBAKW;;AACxB,YAAI,IAAJ,EAAU;AACN,gBAAI,QAAQ,YAAY,CAAZ,MAAmB,GAAnB,IAA0B,YAAY,OAAZ,CAAoB,IAApB,MAA8B,CAAC,CAAD,CAD9D;AAEN,gBAAI,CAAC,KAAD,IAAU,KAAK,QAAL,CAAc,GAAd,CAAV,EAA8B;AAC9B,wBAAQ,YAAY,OAAZ,CAAoB,KAAK,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAApB,MAA4C,CAAC,CAAD,CADtB;aAAlC;;AAIA,uBAAW,QAAQ,mBAAS,GAAT,GAAgB,YAAY,mBAAS,IAAT,CANzC;SAAV;;sEANa,kCAgBT,UACA,mCAAyB,uBAAzB,GACA,gBAboB;KAA5B;;WALiB","file":"BrowserConsoleHandler.js","sourcesContent":["import Handler from '../Handler';\nimport LogLevel from '../LogLevel';\nimport LayoutBrowserConsole from '../layouts/LayoutBrowserConsole';\nimport * as formatterBrowserConsole from '../formatters/formatterBrowserConsole';\nimport * as outputConsole from '../outputs/outputBrowserConsole';\n\nconst debugValues = ((querystring) => {\n    let debugFromLocalStorage = global.localStorage && localStorage.DEBUG && localStorage.DEBUG || [];\n    if (typeof debugFromLocalStorage === 'string') {\n        debugFromLocalStorage = debugFromLocalStorage.split(',');\n    }\n\n    if (!querystring) {\n        return debugFromLocalStorage;\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/URLUtils/search#Get_the_value_of_a_single_search_param\n    return debugFromLocalStorage.concat(decodeURI(\n        querystring.replace(\n            new RegExp('^(?:.*[&\\\\?]' + 'DEBUG' + '(?:\\\\=([^&]*))?)?.*$', 'i'),\n            '$1'\n        )\n    ).split(','));\n})(location.search);\n\nexport default class BrowserConsoleHandler extends Handler {\n    /**\n     * @param {int} minLevel see {@link LogLevel}\n      * @param {string} [name] based on localStorage.DEBUG or querystring to determine the minimum level displayed\n     */\n    constructor(minLevel, name) {\n        if (name) {\n            let debug = debugValues[0] === '*' || debugValues.indexOf(name) !== -1;\n            if (!debug && name.includes('.')) {\n                debug = debugValues.indexOf(name.split('.')[0]) !== -1;\n            }\n\n            minLevel = debug ? LogLevel.ALL : (minLevel || LogLevel.WARN);\n        }\n\n        super(\n            minLevel,\n            new LayoutBrowserConsole(formatterBrowserConsole),\n            outputConsole\n        );\n    }\n}\n"]}