{"version":3,"sources":["../../src/Logger.js"],"names":[],"mappings":"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","file":"Logger.js","sourcesContent":["import util from 'util';\nimport levels from 'nightingale-levels';\nimport { getForLogger } from './config';\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport default class Logger {\n    key: string;\n\n    /**\n     * Create a new Logger\n     *\n     * @param {string} key\n     */\n    constructor(key) {\n        this.key = key;\n    }\n\n    /**\n     * Handle a record\n     *\n     * Use this only if you know what you are doing.\n     *\n     * @param {Object} record\n     */\n    addRecord(record) {\n        let { handlers, processors } = getForLogger(this.key);\n        handlers = handlers.filter(handler => handler.isHandling(record.level));\n        if (handlers.length === 0) {\n            return;\n        }\n\n        if (processors) {\n            processors.forEach(process => process(record, record.context));\n        }\n\n        handlers.some(handler => handler.handle(record) === false);\n    }\n\n    /**\n     * Log a message\n     *\n     * @param {string} message\n     * @param {Object} metadata\n     * @param {int} [level]\n     * @param {Object} [options]\n     * @return {Logger}\n     */\n    log(message, metadata, level = levels.INFO, options = undefined) {\n        let context = metadata && metadata.context;\n        if (metadata) {\n            delete metadata.context;\n        }\n\n        let record = {\n            level: level,\n            key: this.key,\n            datetime: new Date(),\n            message: message,\n            context: context,\n            metadata: metadata,\n            extra: {},\n        };\n\n        if (options) {\n            record = Object.assign(options, record);\n        }\n\n        this.addRecord(record);\n        return this;\n    }\n\n\n    /**\n     * Log a trace message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    trace(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.TRACE, { metadataStyles });\n    }\n\n\n    /**\n     * Log a debug message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    debug(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.DEBUG, { metadataStyles });\n    }\n\n    /**\n     * Log an info message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    info(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.INFO, { metadataStyles });\n    }\n\n    /**\n     * Log a warn message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    warn(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.WARN, { metadataStyles });\n    }\n\n    /**\n     * Log an error message\n     *\n     * @param {string|Error} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    error(message, metadata, metadataStyles) {\n        message = message.stack || message.message || message;\n        return this.log(message, metadata, levels.ERROR, { metadataStyles });\n    }\n\n    /**\n     * Log an alert message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    alert(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.ALERT, { metadataStyles });\n    }\n\n    /**\n     * Log a fatal message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    fatal(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.FATAL, { metadataStyles });\n    }\n\n    /**\n     * Log an inspected value\n     *\n     * @param {*} value\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    inspectValue(value, metadata, metadataStyles) {\n        // Note: inspect is a special function for node:\n        // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n        value = util.inspect(value, { depth: 6 });\n        return this.log(value, metadata, levels.DEBUG, { metadataStyles, styles: ['gray'] });\n    }\n\n    /**\n     * Log a debugged var\n     *\n     * @param {string} varName\n     * @param {*} varValue\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    inspectVar(varName, varValue, metadata, metadataStyles) {\n        varValue = util.inspect(varValue, { depth: 6 });\n        return this.log(`${varName} = ${varValue}`, metadata, levels.DEBUG, { metadataStyles, styles: ['cyan'] });\n    }\n\n    /**\n     * Alias for infoSuccess\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    success(message, metadata, metadataStyles) {\n        return this.infoSuccess(message, metadata, metadataStyles);\n    }\n\n    /**\n     * Log an info success message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    infoSuccess(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.INFO, {\n            metadataStyles,\n            symbol: '✔',\n            styles: ['green', 'bold'],\n        });\n    }\n\n    /**\n     * Log an debug success message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    debugSuccess(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.DEBUG, {\n            metadataStyles,\n            symbol: '✔',\n            styles: ['green'],\n        });\n    }\n\n    /**\n     * Alias for infoFail\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    fail(message, metadata, metadataStyles) {\n        return this.infoSuccess(message, metadata, metadataStyles);\n    }\n\n    /**\n     * Log an info fail message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    infoFail(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.INFO, {\n            metadataStyles,\n            symbol: '✖',\n            styles: ['red', 'bold'],\n        });\n    }\n\n    /**\n     * Log an info fail message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    debugFail(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.DEBUG, {\n            metadataStyles,\n            symbol: '✖',\n            styles: ['red'],\n        });\n    }\n\n    /**\n     * @returns {*} time to pass to timeEnd\n     */\n    time() {\n        return Date.now();\n    }\n\n    /**\n    * Finds difference between when this method\n    * was called and when the respective time method\n    * was called, then logs out the difference\n    * and deletes the original record\n    *\n    * @param {number=} time return of previous call to time()\n    * @param {string} [message]\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n    */\n    timeEnd(time, message = '', metadata = {}, metadataStyles) {\n        const now = Date.now();\n\n        const diffTime = now - time;\n        const seconds = diffTime > 1000 && Math.floor(diffTime / 1000);\n        const ms = diffTime - seconds * 1000;\n\n        metadata.timeMs = diffTime;\n        message = `${message ? `${message}: ` : ''}${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n        this.log(message, metadata, levels.DEBUG, { metadataStyles });\n    }\n\n    /**\n     * Log an enter in a function\n     *\n     * @example\n     * class A {\n     *   method(arg1) {\n     *     logger.enter(method, { arg1 });\n     *     // Do your stuff\n     *   }\n     * }\n     *\n     * @param {Function} fn\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    enter(fn, metadata, metadataStyles) {\n        return this.log(`enter ${fn.name}`, metadata, levels.TRACE, { metadataStyles });\n    }\n\n    /**\n     * Log an exit in a function\n     *\n     * @example\n     * const logger = new ConsoleLogger('myNamespace.A');\n     * class A {\n     *   method(arg1) {\n     *     // Do your stuff\n     *     logger.exit(method, { arg1 });\n     *   }\n     * }\n     *\n     *\n     * @param {Function} fn\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    exit(fn, metadata, metadataStyles) {\n        return this.log(`exit ${fn.name}`, metadata, levels.TRACE, { metadataStyles });\n    }\n\n    /**\n     * Wrap around a function to log enter and exit of a function\n     *\n     * @example\n     * const logger = new ConsoleLogger('myNamespace.A');\n     * class A {\n     *   method() {\n     *     logger.wrap(method, () => {\n     *       // Do your stuff\n     *     });\n     *   }\n     * }\n     *\n     * @param {Function} fn\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @param {Function} callback\n     */\n    wrap(fn, metadata, metadataStyles, callback) {\n        if (typeof metadata === 'function') {\n            callback = metadata;\n            metadata = undefined;\n        } else if (typeof metadataStyles === 'function') {\n            callback = metadataStyles;\n            metadataStyles = undefined;\n        }\n\n        this.enter(fn, metadata, metadataStyles);\n        callback();\n        this.exit(fn);\n    }\n}\n"]}