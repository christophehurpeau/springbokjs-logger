{"version":3,"sources":["../src/config.js"],"names":["global","__NIGHTINGALE_GLOBAL_HANDLERS","Error","__NIGHTINGALE_CONFIG","__NIGHTINGALE_LOGGER_MAP_CACHE","Map","__NIGHTINGALE_CONFIG_DEFAULT","handlers","processors","clearCache","clear","handleConfig","config","keys","pattern","key","patterns","handler","processor","configure","length","console","log","map","addConfig","unshift","configIsForKey","includes","test","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER","getConfigForLogger","globalCache","has","get","loggerConfig","filter","some","push","stop","set","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD","getConfigForLoggerRecord","level","minLevel","isHandling"],"mappings":"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","file":"config.js","sourcesContent":["type Config = {|\n  stop: ?boolean,\n  pattern: ?RegExp,\n  key: ?string,\n  keys: ?Array<string>,\n  handler: ?Object,\n  handlers: ?Array<Object>,\n  processor: ?any,\n  processors: ?Array<any>,\n|};\n\nif (!PRODUCTION && global.__NIGHTINGALE_GLOBAL_HANDLERS) {\n  // eslint-disable-next-line no-console\n  throw new Error('nightingale: update all to ^5.0.0');\n}\n\nif (!global.__NIGHTINGALE_CONFIG) {\n  global.__NIGHTINGALE_CONFIG = [];\n  global.__NIGHTINGALE_LOGGER_MAP_CACHE = new Map();\n  global.__NIGHTINGALE_CONFIG_DEFAULT = { handlers: [], processors: [] };\n}\n\nfunction clearCache() {\n  global.__NIGHTINGALE_LOGGER_MAP_CACHE.clear();\n}\n\nfunction handleConfig(config: Config) {\n  if (config.keys) {\n    if (config.pattern) {\n      throw new Error('Cannot have key and pattern for the same config');\n    }\n    if (config.key) {\n      throw new Error('Cannot have key and keys for the same config');\n    }\n  } else if (config.key) {\n    if (config.pattern) {\n      throw new Error('Cannot have key and pattern for the same config');\n    }\n    config.keys = [config.key];\n    delete config.key;\n  }\n\n  if (config.patterns) {\n    throw new Error('config.patterns is no longer supported, use pattern');\n  }\n\n  if (config.handler) {\n    if (config.handlers) {\n      throw new Error('Cannot have handler and handlers for the same config');\n    }\n    config.handlers = [config.handler];\n    delete config.handler;\n  }\n\n  if (config.processor) {\n    if (config.processors) {\n      throw new Error('Cannot have processors and processors for the same config');\n    }\n    config.processors = [config.processor];\n    delete config.processor;\n  }\n\n  return config;\n}\n\nexport function configure(config) {\n  if (global.__NIGHTINGALE_CONFIG.length !== 0) {\n    // eslint-disable-next-line no-console\n    console.log('nightingale: warning: config overridden');\n  }\n\n  clearCache();\n  global.__NIGHTINGALE_CONFIG = config.map(handleConfig);\n}\n\nexport function addConfig(config: Config, unshift = false) {\n  config = handleConfig(config);\n  global.__NIGHTINGALE_CONFIG[unshift ? 'unshift' : 'push'](config);\n  clearCache();\n}\n\nconst configIsForKey = key => config => {\n  if (config.keys) return config.keys.includes(key);\n  if (config.pattern) return config.pattern.test(key);\n  return true;\n};\n\nglobal.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER = function getConfigForLogger(key) {\n  const globalCache = global.__NIGHTINGALE_LOGGER_MAP_CACHE;\n\n  if (globalCache.has(key)) {\n    return globalCache.get(key);\n  }\n\n  const loggerConfig = {\n    handlers: [],\n    processors: [],\n  };\n\n  global.__NIGHTINGALE_CONFIG.filter(configIsForKey(key)).some((config) => {\n    if (config.handlers) loggerConfig.handlers.push(...config.handlers);\n    if (config.processors) loggerConfig.processors.push(...config.processors);\n    return config.stop;\n  });\n\n  globalCache.set(key, loggerConfig);\n  return loggerConfig;\n};\n\nglobal.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD = function getConfigForLoggerRecord(key, level) {\n  const { handlers, processors } = global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n\n  return {\n    handlers: handlers.filter(handler => (\n      level >= handler.minLevel && (!handler.isHandling || handler.isHandling(level, key))\n    )),\n    processors,\n  };\n};\n\n"]}